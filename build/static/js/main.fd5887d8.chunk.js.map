{"version":3,"sources":["hooks/useWordGame.js","App.js","serviceWorker.js","index.js"],"names":["useWordGame","gameTime","useState","text","setText","timeRemaining","setTimeRemaining","isTrue","setIsTrue","wordCount","setWordCount","textBoxRef","useRef","changeVal","e","value","target","textCount","trim","split","filter","word","length","startGame","current","disabled","focus","endGame","useEffect","setTimeout","time","App","onChange","ref","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAsDeA,MApDf,WAAqC,IAAhBC,EAAe,uDAAJ,GAAI,EACVC,mBAAS,IADC,mBAC3BC,EAD2B,KACrBC,EADqB,OAEQF,mBAASD,GAFjB,mBAE3BI,EAF2B,KAEZC,EAFY,OAGNJ,oBAAS,GAHH,mBAG3BK,EAH2B,KAGnBC,EAHmB,OAIAN,mBAAS,GAJT,mBAI3BO,EAJ2B,KAIhBC,EAJgB,KAK5BC,EAAaC,iBAAO,MAE1B,SAASC,EAAUC,GAAI,IACbC,EAAUD,EAAEE,OAAZD,MACRX,EAAQW,GAGV,SAASE,EAAUd,GAEjB,OADcA,EAAKe,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAG3C,SAASC,IACPf,GAAU,GACVF,EAAiBL,GACjBS,EAAa,GACbN,EAAQ,IACRO,EAAWa,QAAQC,UAAW,EAC9Bd,EAAWa,QAAQE,QAGrB,SAASC,IACPnB,GAAU,GACVE,EAAaO,EAAUd,IAazB,OAVAyB,qBAAU,WACJvB,EAAgB,GAAKE,EACvBsB,YAAW,WACTvB,GAAiB,SAAAwB,GAAI,OAAIA,EAAO,OAC/B,KACwB,IAAlBzB,GACTsB,MAED,CAACtB,EAAeE,IAEZ,CACLM,YACAV,OACAE,gBACAkB,YACAd,YACAF,SACAI,eCZWoB,MAlCf,WAAgB,IAAD,EAST/B,IAPFa,EAFW,EAEXA,UACAV,EAHW,EAGXA,KACAE,EAJW,EAIXA,cACAkB,EALW,EAKXA,UACAd,EANW,EAMXA,UACAF,EAPW,EAOXA,OACAI,EARW,EAQXA,WAEF,OACE,6BACE,sDACA,8BACEqB,SAAUnB,EACVE,MAAOZ,EACPsB,UAAWlB,EACX0B,IAAKtB,IAEP,+CAAqBN,GACpBI,EAAY,EACX,4BAAQyB,QAASX,EAAWE,SAAUlB,GAAtC,cAIA,4BAAQ2B,QAASX,EAAWE,SAAUlB,GAAtC,SAIDE,EAAY,2CAAiBA,GAAkB,OCrBlC0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fd5887d8.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction useWordGame(gameTime = 10) {\r\n  const [text, setText] = useState(\"\");\r\n  const [timeRemaining, setTimeRemaining] = useState(gameTime);\r\n  const [isTrue, setIsTrue] = useState(false);\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const textBoxRef = useRef(null);\r\n\r\n  function changeVal(e) {\r\n    const { value } = e.target;\r\n    setText(value);\r\n  }\r\n\r\n  function textCount(text) {\r\n    const words = text.trim().split(\" \");\r\n    return words.filter(word => word !== \"\").length;\r\n  }\r\n\r\n  function startGame() {\r\n    setIsTrue(true);\r\n    setTimeRemaining(gameTime);\r\n    setWordCount(0);\r\n    setText(\"\");\r\n    textBoxRef.current.disabled = false;\r\n    textBoxRef.current.focus();\r\n  }\r\n\r\n  function endGame() {\r\n    setIsTrue(false);\r\n    setWordCount(textCount(text));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (timeRemaining > 0 && isTrue) {\r\n      setTimeout(() => {\r\n        setTimeRemaining(time => time - 1);\r\n      }, 1000);\r\n    } else if (timeRemaining === 0) {\r\n      endGame();\r\n    }\r\n  }, [timeRemaining, isTrue]);\r\n\r\n  return {\r\n    changeVal,\r\n    text,\r\n    timeRemaining,\r\n    startGame,\r\n    wordCount,\r\n    isTrue,\r\n    textBoxRef\r\n  };\r\n}\r\n\r\nexport default useWordGame;\r\n","import React from \"react\";\nimport \"./css/style.css\";\nimport useWordGame from \"./hooks/useWordGame\";\n\nfunction App() {\n  const {\n    changeVal,\n    text,\n    timeRemaining,\n    startGame,\n    wordCount,\n    isTrue,\n    textBoxRef\n  } = useWordGame();\n  return (\n    <div>\n      <h1>How Fast Can You Type?</h1>\n      <textarea\n        onChange={changeVal}\n        value={text}\n        disabled={!isTrue}\n        ref={textBoxRef}\n      />\n      <h4>Time Remaining: {timeRemaining}</h4>\n      {wordCount > 0 ? (\n        <button onClick={startGame} disabled={isTrue}>\n          Play Again\n        </button>\n      ) : (\n        <button onClick={startGame} disabled={isTrue}>\n          Start\n        </button>\n      )}\n      {wordCount ? <h4>Word Count: {wordCount}</h4> : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}