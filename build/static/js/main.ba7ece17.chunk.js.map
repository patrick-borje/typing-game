{"version":3,"sources":["hooks/useWordGame.js","App.js","serviceWorker.js","index.js"],"names":["useWordGame","gameTime","useState","text","setText","timeRemaining","setTimeRemaining","isTrue","setIsTrue","wordCount","setWordCount","textBoxRef","useRef","changeVal","e","value","target","textCount","trim","split","filter","word","length","startGame","current","disabled","focus","endGame","useEffect","setTimeout","time","App","onChange","ref","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAsDeA,MApDf,WAAqC,IAAhBC,EAAe,uDAAJ,GAAI,EACVC,mBAAS,IADC,mBAC3BC,EAD2B,KACrBC,EADqB,OAEQF,mBAASD,GAFjB,mBAE3BI,EAF2B,KAEZC,EAFY,OAGNJ,oBAAS,GAHH,mBAG3BK,EAH2B,KAGnBC,EAHmB,OAIAN,mBAAS,GAJT,mBAI3BO,EAJ2B,KAIhBC,EAJgB,KAK5BC,EAAaC,iBAAO,MAE1B,SAASC,EAAUC,GAAI,IACbC,EAAUD,EAAEE,OAAZD,MACRX,EAAQW,GAGV,SAASE,EAAUd,GAEjB,OADcA,EAAKe,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAG3C,SAASC,IACPf,GAAU,GACVF,EAAiBL,GACjBS,EAAa,GACbN,EAAQ,IACRO,EAAWa,QAAQC,UAAW,EAC9Bd,EAAWa,QAAQE,QAGrB,SAASC,IACPnB,GAAU,GACVE,EAAaO,EAAUd,IAazB,OAVAyB,qBAAU,WACJvB,EAAgB,GAAKE,EACvBsB,YAAW,WACTvB,GAAiB,SAAAwB,GAAI,OAAIA,EAAO,OAC/B,KACwB,IAAlBzB,GACTsB,MAED,CAACtB,EAAeE,IAEZ,CACLM,YACAV,OACAE,gBACAkB,YACAd,YACAF,SACAI,eCZWoB,MAlCf,WAAgB,IAAD,EAST/B,EAAY,IAPda,EAFW,EAEXA,UACAV,EAHW,EAGXA,KACAE,EAJW,EAIXA,cACAkB,EALW,EAKXA,UACAd,EANW,EAMXA,UACAF,EAPW,EAOXA,OACAI,EARW,EAQXA,WAEF,OACE,6BACE,sDACA,8BACEqB,SAAUnB,EACVE,MAAOZ,EACPsB,UAAWlB,EACX0B,IAAKtB,IAEP,+CAAqBN,GACpBI,EAAY,EACX,4BAAQyB,QAASX,EAAWE,SAAUlB,GAAtC,cAIA,4BAAQ2B,QAASX,EAAWE,SAAUlB,GAAtC,SAIDE,EAAY,2CAAiBA,GAAkB,OCrBlC0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba7ece17.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction useWordGame(gameTime = 20) {\r\n  const [text, setText] = useState(\"\");\r\n  const [timeRemaining, setTimeRemaining] = useState(gameTime);\r\n  const [isTrue, setIsTrue] = useState(false);\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const textBoxRef = useRef(null);\r\n\r\n  function changeVal(e) {\r\n    const { value } = e.target;\r\n    setText(value);\r\n  }\r\n\r\n  function textCount(text) {\r\n    const words = text.trim().split(\" \");\r\n    return words.filter(word => word !== \"\").length;\r\n  }\r\n\r\n  function startGame() {\r\n    setIsTrue(true);\r\n    setTimeRemaining(gameTime);\r\n    setWordCount(0);\r\n    setText(\"\");\r\n    textBoxRef.current.disabled = false;\r\n    textBoxRef.current.focus();\r\n  }\r\n\r\n  function endGame() {\r\n    setIsTrue(false);\r\n    setWordCount(textCount(text));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (timeRemaining > 0 && isTrue) {\r\n      setTimeout(() => {\r\n        setTimeRemaining(time => time - 1);\r\n      }, 1000);\r\n    } else if (timeRemaining === 0) {\r\n      endGame();\r\n    }\r\n  }, [timeRemaining, isTrue]);\r\n\r\n  return {\r\n    changeVal,\r\n    text,\r\n    timeRemaining,\r\n    startGame,\r\n    wordCount,\r\n    isTrue,\r\n    textBoxRef\r\n  };\r\n}\r\n\r\nexport default useWordGame;\r\n","import React from \"react\";\r\nimport \"./css/style.css\";\r\nimport useWordGame from \"./hooks/useWordGame\";\r\n\r\nfunction App() {\r\n  const {\r\n    changeVal,\r\n    text,\r\n    timeRemaining,\r\n    startGame,\r\n    wordCount,\r\n    isTrue,\r\n    textBoxRef\r\n  } = useWordGame(10);\r\n  return (\r\n    <div>\r\n      <h1>How Fast Can You Type?</h1>\r\n      <textarea\r\n        onChange={changeVal}\r\n        value={text}\r\n        disabled={!isTrue}\r\n        ref={textBoxRef}\r\n      />\r\n      <h4>Time Remaining: {timeRemaining}</h4>\r\n      {wordCount > 0 ? (\r\n        <button onClick={startGame} disabled={isTrue}>\r\n          Play Again\r\n        </button>\r\n      ) : (\r\n        <button onClick={startGame} disabled={isTrue}>\r\n          Start\r\n        </button>\r\n      )}\r\n      {wordCount ? <h4>Word Count: {wordCount}</h4> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}